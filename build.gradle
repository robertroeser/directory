buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.1"
        classpath "com.netflix.nebula:gradle-stash-plugin:${nebulaGradleVersion}.+"
        classpath "com.netflix.nebula:gradle-override-plugin:${nebulaGradleVersion}.+"
    }
}

allprojects {

    configurations {
        all*.exclude group: 'log4j', module: 'log4j'
    }


    apply plugin: 'nebula'
    apply plugin: 'nebula-ospackage'
    apply plugin: 'application'
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'platform-java8-fix'
    apply plugin: 'com.github.johnrengelman.shadow'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    nebula {
        readyForJava8 = true
        moduleOwner = 'edge-services@netflix.com'
    }

}


subprojects {

    dependencies {
        testCompile 'junit:junit:4.+'
    }
}

project (':directory-core') {
    dependencies {
        compile 'io.reactivex:rxjava:1.0.8'
        compile 'uk.co.real-logic:sbe:1.1-RC2-SNAPSHOT'
        compile 'uk.co.real-logic:Agrona:0.3.2-SNAPSHOT'
        compile 'uk.co.real-logic:aeron-client:0.1-SNAPSHOT'
        compile 'uk.co.real-logic:aeron-driver:0.1-SNAPSHOT'
        compile 'uk.co.real-logic:aeron-tools:0.1-SNAPSHOT'

        compile 'org.apache.logging.log4j:log4j-core:2.3'
        compile 'org.apache.logging.log4j:log4j-api:2.3'
        compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.3'
        compile 'org.apache.logging.log4j:log4j-1.2-api:2.3'

    }

    // ./gradlew generateStubs
    task generateStubs(type:JavaExec) {
        description = "Generate SBE codecs into ${project.projectDir}/src/main/java/pubsub/schema"
        main = 'uk.co.real_logic.sbe.SbeTool'
        classpath = sourceSets.main.compileClasspath
        systemProperties(
                'sbe.output.dir': "${project.projectDir}/src/main/java",
                'sbe.target.language': 'Java',
                'sbe.validation.stop.on.error': 'true')
        args "${project.projectDir}/src/main/resources/schema.xml"
    }

}

project (':directory-server') {
    dependencies {
        compile project (':directory-core')
        compile 'netflix:nflx-datastax-driver:1.0'
        compile 'org.mapdb:mapdb:1.0.7'
        compile 'io.reactivex:rxjava:1.0.8'
        compile 'io.reactivex:rxnetty:0.4.9'
        compile 'uk.co.real-logic:aeron-client:0.1-SNAPSHOT'
        compile 'uk.co.real-logic:aeron-driver:0.1-SNAPSHOT'
        compile 'uk.co.real-logic:aeron-tools:0.1-SNAPSHOT'
    }

    task runServer(type:JavaExec) {
        description = "Run the Directory Server"
        main = 'netflix.directory.server.DirectoryAeron'
        classpath = sourceSets.main.runtimeClasspath
    }
}

project (':directory-client') {
    dependencies {
        compile project (':directory-core')
        compile 'io.reactivex:rxjava:1.0.8'
        compile 'io.reactivex:rxnetty:0.4.9'
        compile 'com.google.guava:guava:18.0'
        compile 'uk.co.real-logic:aeron-client:0.1-SNAPSHOT'
        compile 'uk.co.real-logic:aeron-driver:0.1-SNAPSHOT'
        compile 'uk.co.real-logic:aeron-tools:0.1-SNAPSHOT'
        compile 'com.fasterxml.uuid:java-uuid-generator:3.1.3'
    }

    task runClient(type:JavaExec) {
        description = "Run the Directory Client"
        main = 'netflix.directory.client.DirectoryAeronClient'
        classpath = sourceSets.main.runtimeClasspath
    }

}
